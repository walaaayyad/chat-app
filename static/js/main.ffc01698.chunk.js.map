{"version":3,"sources":["Components/RoomList.js","Components/Message.js","Components/MessageList.js","Components/SendMessageForm.js","Components/NewRoomForm.js","Components/UsersList.js","App.js","config.js","serviceWorker.js","index.js"],"names":["style","width","height","backgroundColor","color","margin","border","display","textAlign","listStyle","listStyleType","activeS","hrefStyle","textDecoration","cursor","roomList","props","rooms","map","room","active","roomId","id","key","onClick","subscribeToRoom","href","name","msgStyle","marginLeft","borderRadius","padding","message","user","text","overflow","alert","fontSize","marginTop","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","messages","indx","Message","senderId","Component","inputStyle","sendMessageForm","handlerChange","e","setState","target","value","handlerSubmit","preventDefault","sendMessage","state","bind","onSubmit","disabled","onChange","placeholder","type","newRoomForm","roomName","handleChange","handleSubmit","createRoom","required","online","offline","usersList","users","onlineState","presence","offlineState","App","joinablerooms","joinedRooms","currentUser","then","catch","err","console","log","tokenProvider","Chatkit","TokenProvider","url","ChatManager","instanceLocator","userId","connect","getRooms","error","getJoinableRooms","hooks","onMessage","onPresenceChanged","messageLimit","className","RoomList","UsersList","NewRoomForm","SendMessageForm","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ffc01698.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/**********  CSS STYLE  **********/\r\n/**** Container(div) Style ****/\r\nconst style= {\r\n    width: '20%',\r\n    height: '490px',\r\n    backgroundColor: '#29a19c' ,\r\n    color: 'white',\r\n    margin: '1px',\r\n    border: '1px solid gray',\r\n    display: 'inline-block',\r\n    textAlign: 'left'\r\n}\r\n\r\n/**** (ul) Style ****/\r\nconst listStyle={\r\n    listStyleType: 'none'\r\n}\r\n\r\n/**** (li) Style ****/\r\nconst activeS={\r\n    color: 'white'\r\n}\r\n\r\n/**** (a) Style ****/\r\nconst hrefStyle= {\r\n    textDecoration: 'none',\r\n    color: 'rgba(240, 245, 247, 0.404)',\r\n    cursor: 'pointer'\r\n}\r\n/*******************************************/\r\n\r\n\r\n\r\n\r\n        const roomList= (props)=> {\r\n\r\n            return <div style={style}>\r\n                        <ul style={listStyle}>\r\n                            <h3>Rooms</h3>\r\n                            {props.rooms.map(room => {\r\n                                const active= (props.roomId === room.id ? activeS : hrefStyle);\r\n                                return (\r\n                                    <li key={room.id} style={active}>\r\n                                        <a onClick={()=> props.subscribeToRoom(room.id)}\r\n                                            href='#'\r\n                                            style={hrefStyle , active}>\r\n                                            # {room.name}\r\n                                            </a>\r\n                                    </li>\r\n                                )\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n            }         \r\n        export default roomList;\r\n\r\n","import React from 'react'\r\n/******* CSS STYLE *******/\r\nconst msgStyle= {\r\n    backgroundColor:'#9dd8c8',\r\n    display: 'inline-block',\r\n    marginLeft: '5px',\r\n    borderRadius: '20px',\r\n    padding: '10px 20px ',\r\n \r\n   \r\n}\r\n/******************************************/\r\n        const message= (props) => {\r\n            return(\r\n                <div>\r\n                    <div>{props.user}</div>\r\n                    <div style={msgStyle}>{props.text}</div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        export default message;\r\n\r\n","import React, {Component} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Message from './Message'\r\n\r\n/**********  CSS STYLE  **********/\r\nconst style= {\r\n    width: '50%',\r\n    height: '490px',\r\n    overflow: 'auto',\r\n    display: 'inline',\r\n    margin: '1px',\r\n    border: '1px solid gray',\r\n    textAlign: 'left',\r\n\r\n}\r\n \r\nconst alert= {\r\n    textAlign: 'center',\r\n    fontSize: '2em',\r\n    marginTop: '170px',\r\n    color: '#29a19c'\r\n}\r\n\r\n/***********************************************/\r\n        class MessageList extends Component {\r\n            /*Handle the scroll of Message List ( Autoscroll down when you write a new msg ) \r\n            & If you scrollup to read old msgs and someone send new msg the scroll not move to the bottom */\r\n        componentWillUpdate() {\r\n            const node= ReactDOM.findDOMNode(this)\r\n            this.shouldScrollToBottom= node.scrollTop + node.clientHeight +100 >= node.scrollHeight \r\n        }\r\n\r\n            componentDidUpdate() {\r\n                if(this.shouldScrollToBottom) {\r\n                const node= ReactDOM.findDOMNode(this)\r\n                node.scrollTop = node.scrollHeight\r\n            }\r\n        }\r\n            \r\n            render() {\r\n                if(!this.props.roomId) {\r\n                    return (\r\n                        <div style={style}>\r\n                            <div style={alert}>\r\n                            Join a Room\r\n                                </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                    return (\r\n                    <div id='msg' style={style}>\r\n                        {this.props.messages.map((message,indx)=>{\r\n                            return(\r\n                                <Message key={indx}\r\n                                user ={message.senderId}\r\n                                text ={message.text}\r\n                                />\r\n                                    \r\n                            \r\n                            )\r\n                        }\r\n                    )}\r\n\r\n                </div>)\r\n            }\r\n        }\r\n\r\n\r\n        export default MessageList;\r\n\r\n","import React, {Component} from 'react'\r\n\r\n/**********  CSS STYLE  **********/\r\n/* Form Style */\r\nconst style={\r\n    width: '70.3%',\r\n    height: '60px',\r\n    margin: '1px',\r\n    border: '1px solid gray',\r\n    display: 'inline-block',\r\n    textAlign: 'left'\r\n}\r\n/* Input Style */\r\nconst inputStyle= {\r\n    width: '99.5%',\r\n    height: '90%',\r\n    fontSize: '1em'\r\n}\r\n\r\n/*********************************************/\r\n\r\n        class sendMessageForm extends Component {\r\n            constructor() {\r\n                super()\r\n                this.state = {\r\n                    message: ''\r\n                }\r\n                this.handlerChange = this.handlerChange.bind(this)\r\n                this.handlerSubmit = this.handlerSubmit.bind(this)\r\n            }\r\n            handlerChange=(e)=> {\r\n            this.setState({message: e.target.value})\r\n            }\r\n            handlerSubmit=(e)=> {\r\n                e.preventDefault()\r\n                this.props.sendMessage(this.state.message)\r\n                this.setState({message: ''})\r\n                }\r\n            render() {\r\n                return(\r\n                    <form style={style}\r\n                        onSubmit={this.handlerSubmit }>\r\n                            <input \r\n                                disabled={this.props.disabled}\r\n                                onChange={this.handlerChange}\r\n                                value={this.state.message}\r\n                                style={inputStyle}\r\n                                placeholder=\"Input Your Message\"\r\n                                type=\"text\"/>\r\n                    </form>\r\n                ) \r\n            }\r\n        }\r\n\r\n        export default sendMessageForm;\r\n\r\n\r\n","import React, { Component } from 'react'\r\n\r\n/**********  CSS STYLE  **********/\r\n/**** Room Form Style ****/\r\nconst style={\r\n    width: '20%',\r\n    height: '60px',\r\n    backgroundColor:'white',\r\n    margin: '1px',\r\n    border: '1px solid gray',\r\n    display: 'inline-block'\r\n}\r\n/* Input Style */\r\nconst inputStyle= {\r\n    width: '99%',\r\n    height: '52px',\r\n    fontSize: '1em'\r\n}\r\n\r\n/************************************************/\r\n        class newRoomForm extends Component {\r\n            /*      ****OLd way****\r\n            constructor(){\r\n                super()\r\n                this.state = {\r\n                    roomName: ''\r\n                }\r\n                this.handleChange = this.handleChange.bind(this)\r\n                this.handleSubmit = this.handleSubmit.bind(this)\r\n\r\n                handleChange(e) {\r\n                this.setState({\r\n                    roomName: e.target.value\r\n                })\r\n            }\r\n            handleSubmit(e) {\r\n                e.preventDefault()\r\n                this.props.createRoom(this.state.roomName)\r\n            }\r\n            }*/\r\n\r\n            /*---------------------------------------------------------------------\r\n            ****New Way****\r\n            Note-->  if you use this way and want to pass method to child append .bind(this)\r\n            like <child \r\n                handleChange = {this.handleChage.bind(this)}/>\r\n            */\r\n            state={\r\n                roomName:''\r\n            }\r\n\r\n            handleChange= (e)=> {\r\n                this.setState({\r\n                    roomName: e.target.value\r\n                })\r\n            }\r\n            handleSubmit= (e)=> {\r\n                e.preventDefault()\r\n                this.props.createRoom(this.state.roomName)\r\n                this.setState({ roomName: ''})\r\n            }\r\n            render() {\r\n                return (\r\n                    <div style={style}>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <input\r\n                            style={inputStyle}\r\n                            value={this.state.roomName}\r\n                            onChange={this.handleChange} \r\n                            type='text'\r\n                            placeholder='New Room'\r\n                            required/>\r\n                        </form>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n        export default newRoomForm;\r\n\r\n\r\n","//https://pusher.com/docs/chatkit/reference/javascript#user-presence\r\n\r\nimport React from 'react'\r\n/**********  CSS STYLE  **********/\r\n/**** Container(div) Style ****/\r\nconst style= {\r\n    width: \"20%\",\r\n    backgroundColor: '#29a19c' ,\r\n    color: 'white',\r\n    margin: '1px',\r\n    border: '1px solid gray',\r\n\r\n}\r\n/**** online(li) Style ****/\r\nconst online={\r\n    color: 'white'\r\n}\r\n\r\n/**** offline(li) Style ****/\r\nconst offline= {\r\n    textDecoration: 'none',\r\n    color: 'rgba(240, 245, 247, 0.404)'\r\n}\r\n//************************************************/\r\n  \r\n        const usersList =(props) =>{ \r\n        //console.log(`the current user ${props.users}`)\r\n                \r\n        return  <div style={style}>\r\n                <h3> Users </h3>\r\n                    <ul>\r\n                        {props.users.map((user)=>{\r\n                            const onlineState = (user.presence.state === 'online'? online : offline) // condition active style when the user is online\r\n                            const offlineState = (user.presence.state === 'online'? '' : '  (offline)') // condition active style when the user is online\r\n                            return(\r\n                                    <li key={user.id}\r\n                                    style={offline, onlineState}>\r\n                                    {user.name}{offlineState}\r\n                                    </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            \r\n                }\r\n\r\n        export default usersList;\r\n\r\n","//Helpful Video on this App (https://www.youtube.com/watch?v=jFNHerJqvFw&t=4202s)\r\nimport React, {Component} from 'react'\r\nimport Chatkit from \"@pusher/chatkit-client\"\r\nimport { tokenUrl, instanceLocator } from './config'\r\nimport RoomList from './Components/RoomList'\r\nimport MessageList from './Components/MessageList'\r\nimport SendMessageForm from './Components/SendMessageForm'\r\nimport NewRoomForm from './Components/NewRoomForm'\r\nimport UsersList from './Components/UsersList'\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n state={\r\n  roomId: null,\r\n  messages: [],\r\n  joinablerooms: [],\r\n  joinedRooms: [],\r\n  users: [] // For online users \r\n}\r\n\r\n \r\n  componentDidMount() {\r\n    \r\n    // Create chatManager to start connect with chatkit   [https://pusher.com/docs/chatkit/quick_start/javascript#connect-to-chatkit]\r\n    const tokenProvider= new Chatkit.TokenProvider({\r\n      url:tokenUrl\r\n    })\r\n    const chatManager = new Chatkit.ChatManager({\r\n      instanceLocator: instanceLocator,\r\n      userId: 'walaa',\r\n      tokenProvider: tokenProvider\r\n    })\r\n    chatManager.connect() /*** Second Step is use chatManager to connect with API */\r\n    .then(currentUser => {\r\n      this.setState({ currentUser }) //test online users\r\n      this.currentUser= currentUser /**2- Send messages to messages list 'SendMessageForm component' **/\r\n      this.getRooms()   /**3- Appear joined rooms in the 'RoomList' **/\r\n      /*this.subscribeToRoom()   **1- Receive messages from chatkit to 'MessageList' **/\r\n      \r\n      })\r\n    .catch(error => console.error('error', error))  \r\n  }\r\n\r\n\r\n  getRooms() {\r\n    this.currentUser.getJoinableRooms() \r\n    .then(joinablerooms => {\r\n      this.setState({\r\n        joinablerooms,\r\n        joinedRooms: this.currentUser.rooms\r\n      })  \r\n    })\r\n    .catch(err=> console.log('error on joinable rooms: ', err))\r\n  }\r\n\r\n // Subscribe to room   [https://pusher.com/docs/chatkit/quick_start/javascript#subscribe-to-a-room]\r\n  subscribeToRoom(id) {\r\n    this.setState({ messages: [] })\r\n    this.currentUser.subscribeToRoom({ \r\n        roomId: id ,\r\n        hooks: {\r\n          onMessage: message => {\r\n            this.setState({\r\n              messages: [...this.state.messages,message]\r\n            })\r\n         \r\n          },\r\n          onPresenceChanged: (state,user) => { // to find the state of users (online, offline)\r\n           \r\n            //console.log(`User ${user.name} is ${state.current}`) // Test\r\n          } \r\n        },\r\n        messageLimit: 15\r\n      })\r\n     .then(room=> {\r\n      //console.log(`Created room called  ${room.name}`) // Test \r\n       this.setState({\r\n         roomId: room.id,\r\n         users: room.users // for online users\r\n        })\r\n       this.getRooms()\r\n     })\r\n     .catch(err=> console.log('err on sub ',err))\r\n  }\r\n  // Write new msg & add it to the msgs list \r\n  sendMessage=(text)=> {\r\n   this.currentUser.sendMessage({\r\n     text,\r\n     roomId: this.state.roomId\r\n   })\r\n   \r\n  }\r\n\r\n  // Add new room in the Room List \r\n  createRoom= (name)=> {\r\n    this.currentUser.createRoom({\r\n      name\r\n    })\r\n    .then(room => this.subscribeToRoom(room.id))\r\n    .catch(err => console.log('error with create room', err))\r\n    \r\n  }\r\n  \r\n  render(){\r\n    //console.log(this.currentUser) // Test Current User Object\r\n    return (\r\n      <div className=\"App\">\r\n        <header>CHAT APPLICATION</header>\r\n          <RoomList \r\n              subscribeToRoom= {this.subscribeToRoom.bind(this)}  // Add .bind(this) to the method if it has an argument\r\n              rooms= {[...this.state.joinablerooms,...this.state.joinedRooms]}\r\n              roomId= {this.state.roomId}/>\r\n          \r\n          <MessageList   \r\n              roomId= {this.state.roomId}\r\n              messages = {this.state.messages}/>\r\n\r\n          <UsersList \r\n              users={this.state.users}\r\n              currentUser={this.currentUser}/>\r\n\r\n          <NewRoomForm\r\n              createRoom = {this.createRoom.bind(this)}/>\r\n          \r\n          <SendMessageForm  \r\n              disabled={!this.state.roomId} // disable the sendMessageForm if no room subscribed(like at the beginning of App)\r\n              sendMessage = {this.sendMessage}/>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n\r\n","\r\nconst tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/d5a96a6e-af43-45c6-969c-4913478b7728/token\"\r\nconst instanceLocator = \"v1:us1:d5a96a6e-af43-45c6-969c-4913478b7728\"\r\n\r\nexport { tokenUrl, instanceLocator }\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}