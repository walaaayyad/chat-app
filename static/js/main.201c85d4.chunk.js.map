{"version":3,"sources":["Components/RoomList.js","Components/Message.js","Components/MessageList.js","Components/SendMessageForm.js","Components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["roomList","props","style","listStyle","rooms","map","room","active","roomId","id","activeS","hrefStyle","key","onClick","subscribeToRoom","href","name","width","height","backgroundColor","color","margin","border","display","textAlign","listStyleType","textDecoration","message","user","msgStyle","text","marginLeft","borderRadius","padding","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","messages","indx","Message","senderId","alert","Component","overflow","fontSize","marginTop","sendMessageForm","handlerChange","e","setState","target","value","handlerSubmit","preventDefault","sendMessage","state","bind","onSubmit","disabled","onChange","inputStyle","placeholder","type","newRoomForm","roomName","handleChange","handleSubmit","createRoom","required","App","joinablerooms","joinedRooms","currentUser","then","catch","err","console","log","tokenProvider","Chatkit","TokenProvider","url","ChatManager","instanceLocator","userId","connect","getRooms","error","getJoinableRooms","hooks","onMessage","messageLimit","className","RoomList","NewRoomForm","SendMessageForm","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.201c85d4.chunk.js","sourcesContent":["/******   Inline Style at the Bottom   ******/\r\n\r\nimport React from 'react';\r\n\r\n\r\n\r\n\r\n\r\nconst roomList= (props)=> {\r\n\r\n  return <div style={style}>\r\n           <ul style={listStyle}>\r\n               <h3>Your Rooms:</h3>\r\n               {props.rooms.map(room => {\r\n                   const active= (props.roomId === room.id ? activeS : hrefStyle);\r\n                   return (\r\n                       <li key={room.id} style={active}>\r\n                           <a onClick={()=> props.subscribeToRoom(room.id)}\r\n                              href='#'\r\n                              style={hrefStyle , active}>\r\n                              # {room.name}\r\n                            </a>\r\n                       </li>\r\n                   )\r\n               })}\r\n           </ul>\r\n           </div>\r\n}         \r\nexport default roomList;\r\n\r\n/**********  CSS STYLE  **********/\r\n/**** Container(div) Style ****/\r\nconst style= {\r\n    width: '26%',\r\n    height: '490px',\r\n    backgroundColor: '#29a19c' ,\r\n    color: 'white',\r\n    margin: '1px',\r\n    border: '1px solid gray',\r\n    display: 'inline-block',\r\n    textAlign: 'left'\r\n}\r\n\r\n/**** (ul) Style ****/\r\nconst listStyle={\r\n    listStyleType: 'none'\r\n}\r\n\r\n/**** (li) Style ****/\r\nconst activeS={\r\n    color: 'white'\r\n}\r\n\r\n/**** (a) Style ****/\r\nconst hrefStyle= {\r\n    textDecoration: 'none',\r\n    color: 'rgba(240, 245, 247, 0.404)'\r\n}","/******   Inline Style at the Bottom   ******/\r\n\r\n\r\nimport React from 'react'\r\n\r\nconst message= (props) => {\r\n    return(\r\n        <div>\r\n            <div>{props.user}</div>\r\n            <div style={msgStyle}>{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default message;\r\n\r\n/******* CSS STYLE *******/\r\nconst msgStyle= {\r\n    backgroundColor:'#9dd8c8',\r\n    display: 'inline-block',\r\n    marginLeft: '5px',\r\n    borderRadius: '30%',\r\n    padding: '10px',\r\n \r\n   \r\n}\r\n","/******   Inline Style at the Bottom   ******/\r\n\r\n\r\nimport React, {Component} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Message from './Message'\r\n\r\n \r\nclass MessageList extends Component {\r\n    /*Handle the scroll of Message List ( Autoscroll down when you write a new msg ) \r\n    & If you scrollup to read old msgs and someone send new msg the scroll not move to the bottom */\r\n   componentWillUpdate() {\r\n    const node= ReactDOM.findDOMNode(this)\r\n    this.shouldScrollToBottom= node.scrollTop + node.clientHeight +100 >= node.scrollHeight \r\n   }\r\n\r\n    componentDidUpdate() {\r\n        if(this.shouldScrollToBottom) {\r\n        const node= ReactDOM.findDOMNode(this)\r\n        node.scrollTop = node.scrollHeight\r\n   }\r\n}\r\n    \r\n    render() {\r\n       if(!this.props.roomId) {\r\n           return (\r\n               <div style={style}>\r\n                   <div style={alert}>\r\n                   Alert: Join a Room\r\n                    </div>\r\n               </div>\r\n           )\r\n       }\r\n        return (\r\n        <div id='msg' style={style}>\r\n            {this.props.messages.map((message,indx)=>{\r\n                return(\r\n                    <Message key={indx}\r\n                    user ={message.senderId}\r\n                    text ={message.text}\r\n                    />\r\n                        \r\n                \r\n                )\r\n            }\r\n        )}\r\n\r\n        </div>)\r\n    }\r\n}\r\n\r\n\r\nexport default MessageList;\r\n\r\n/**********  CSS STYLE  **********/\r\n\r\nconst style= {\r\n    width: '70%',\r\n    height: '490px',\r\n    overflow: 'auto',\r\n    display: 'inline',\r\n    margin: '1px',\r\n    border: '1px solid gray',\r\n    textAlign: 'left',\r\n\r\n}\r\n \r\nconst alert= {\r\n    textAlign: 'center',\r\n    fontSize: '2em',\r\n    marginTop: '170px',\r\n    color: 'red'\r\n}","/******   Inline Style at the Bottom   ******/\r\n\r\nimport React, {Component} from 'react'\r\n\r\nclass sendMessageForm extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            message: ''\r\n        }\r\n        this.handlerChange = this.handlerChange.bind(this)\r\n        this.handlerSubmit = this.handlerSubmit.bind(this)\r\n    }\r\n    handlerChange=(e)=> {\r\n     this.setState({message: e.target.value})\r\n    }\r\n    handlerSubmit=(e)=> {\r\n        e.preventDefault()\r\n        this.props.sendMessage(this.state.message)\r\n        this.setState({message: ''})\r\n        }\r\n    render() {\r\n        return(\r\n            <form style={style}\r\n                  onSubmit={this.handlerSubmit }>\r\n                    <input \r\n                        disabled={this.props.disabled}\r\n                        onChange={this.handlerChange}\r\n                        value={this.state.message}\r\n                        style={inputStyle}\r\n                        placeholder=\"Input Your Message\"\r\n                        type=\"text\"/>\r\n            </form>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default sendMessageForm;\r\n\r\n/**********  CSS STYLE  **********/\r\n/* Form Style */\r\nconst style={\r\n    width: '70%',\r\n    height: '60px',\r\n    margin: '1px',\r\n    border: '1px solid gray',\r\n    display: 'inline-block',\r\n    textAlign: 'left'\r\n}\r\n/* Input Style */\r\nconst inputStyle= {\r\n    width: '99.5%',\r\n    height: '90%',\r\n    fontSize: '1em'\r\n}\r\n\r\n\r\n//Helpful Video on this App (https://www.youtube.com/watch?v=jFNHerJqvFw&t=4202s)","/******   Inline Style at the Bottom   ******/\r\n\r\n\r\nimport React, { Component } from 'react'\r\n\r\nclass newRoomForm extends Component {\r\n    /*      ****OLd way****\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            roomName: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n\r\n         handleChange(e) {\r\n        this.setState({\r\n            roomName: e.target.value\r\n        })\r\n    }\r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.createRoom(this.state.roomName)\r\n    }\r\n    }*/\r\n\r\n    /*---------------------------------------------------------------------\r\n       ****New Way****\r\n    Note-->  if you use this way and want to pass method to child append .bind(this)\r\n    like <child \r\n        handleChange = {this.handleChage.bind(this)}/>\r\n    */\r\n    state={\r\n        roomName:''\r\n    }\r\n\r\n    handleChange= (e)=> {\r\n        this.setState({\r\n            roomName: e.target.value\r\n        })\r\n    }\r\n    handleSubmit= (e)=> {\r\n        e.preventDefault()\r\n        this.props.createRoom(this.state.roomName)\r\n        this.setState({ roomName: ''})\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={style}>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                     style={inputStyle}\r\n                     value={this.state.roomName}\r\n                     onChange={this.handleChange} \r\n                     type='text'\r\n                     placeholder='New Room'\r\n                     required/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default newRoomForm;\r\n\r\n\r\n/**********  CSS STYLE  **********/\r\n/**** Room Form Style ****/\r\nconst style={\r\n    width: '26%',\r\n    height: '60px',\r\n    backgroundColor:'white',\r\n    margin: '1px',\r\n    border: '1px solid gray',\r\n    display: 'inline-block'\r\n}\r\n/* Input Style */\r\nconst inputStyle= {\r\n    width: '99%',\r\n    height: '52px',\r\n    fontSize: '1em'\r\n}","import React, {Component} from 'react'\r\nimport Chatkit from \"@pusher/chatkit-client\"\r\nimport { tokenUrl, instanceLocator } from './config'\r\nimport RoomList from './Components/RoomList'\r\nimport MessageList from './Components/MessageList'\r\nimport SendMessageForm from './Components/SendMessageForm'\r\nimport NewRoomForm from './Components/NewRoomForm'\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n state={\r\n  roomId: null,\r\n  messages: [],\r\n  joinablerooms: [],\r\n  joinedRooms: []\r\n }\r\n\r\n  componentDidMount() {\r\n    \r\n    // Create chatManager to start connect with chatkit   [https://pusher.com/docs/chatkit/quick_start/javascript#connect-to-chatkit]\r\n    const tokenProvider= new Chatkit.TokenProvider({\r\n      url:tokenUrl\r\n    })\r\n    const chatManager = new Chatkit.ChatManager({\r\n      instanceLocator: instanceLocator,\r\n      userId: 'walaa',\r\n      tokenProvider: tokenProvider\r\n    })\r\n    chatManager.connect() /*** Second Step is use chatManager to connect with API */\r\n    .then(currentUser => {\r\n      this.currentUser= currentUser /**2- Send messages to messages list 'SendMessageForm component' **/\r\n      this.getRooms()   /**3- Appear joined rooms in the 'RoomList' **/\r\n      /*this.subscribeToRoom()   **1- Receive messages from chatkit to 'MessageList' **/\r\n      \r\n      })\r\n    .catch(error => console.error('error', error))  \r\n  }\r\n\r\n\r\n  getRooms() {\r\n    this.currentUser.getJoinableRooms() \r\n    .then(joinablerooms => {\r\n      this.setState({\r\n        joinablerooms,\r\n        joinedRooms: this.currentUser.rooms\r\n      })\r\n    })\r\n    .catch(err=> console.log('error on joinable rooms: ', err))\r\n  }\r\n\r\n // Subscribe to room   [https://pusher.com/docs/chatkit/quick_start/javascript#subscribe-to-a-room]\r\n  subscribeToRoom(id) {\r\n    this.setState({ messages: [] })\r\n    this.currentUser.subscribeToRoom({ \r\n        roomId: id ,\r\n        hooks: {\r\n          onMessage: message => {\r\n            this.setState({\r\n              messages: [...this.state.messages,message]\r\n            })\r\n          }\r\n        },\r\n        messageLimit: 15\r\n      })\r\n     .then(room=> {\r\n       this.setState({roomId: room.id})\r\n       this.getRooms()\r\n     })\r\n     .catch(err=> console.log('err on sub ',err))\r\n  }\r\n\r\n  // Write new msg & add it to the msgs list \r\n  sendMessage=(text)=> {\r\n   this.currentUser.sendMessage({\r\n     text,\r\n     roomId: this.state.roomId\r\n   })\r\n   \r\n  }\r\n\r\n  // Add new room in the Room List \r\n  createRoom= (name)=> {\r\n    this.currentUser.createRoom({\r\n      name\r\n    })\r\n    .then(room => this.subscribeToRoom(room.id))\r\n    .catch(err => console.log('error with create room', err))\r\n    \r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header>CHAT APPLICATION</header>\r\n        <RoomList \r\n            subscribeToRoom= {this.subscribeToRoom.bind(this)}  // Add .bind(this) to the method if it has an argument\r\n            rooms= {[...this.state.joinablerooms,...this.state.joinedRooms]}\r\n            roomId= {this.state.roomId}/>\r\n        \r\n        <MessageList   \r\n            roomId= {this.state.roomId}\r\n            messages = {this.state.messages}/>\r\n        \r\n        <NewRoomForm\r\n            createRoom = {this.createRoom.bind(this)}/>\r\n        \r\n        <SendMessageForm  \r\n            disabled={!this.state.roomId} // disable the sendMessageForm if no room subscribed(like at the beginning of App)\r\n            sendMessage = {this.sendMessage} />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n\r\n","\r\nconst tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/d5a96a6e-af43-45c6-969c-4913478b7728/token\"\r\nconst instanceLocator = \"v1:us1:d5a96a6e-af43-45c6-969c-4913478b7728\"\r\n\r\nexport { tokenUrl, instanceLocator }\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}